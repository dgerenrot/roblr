- generator(constraint) object
  - null object
  - zero object (zero, "", empty, etc)
  - more generally .equalsTo and ref==
  - build from json

- How to replace interpreters? By type only?
- What about streams or any other param-d type?
  - focus on collections/maps for now.

- move to org.roblr

- charset support object to abstract unif.
  dist over union of integer ranges (UTF-8)

- spec language for strings? Dates? Enums?

- primitives?
- roblr generated collections: produce array of generated object ids
- hierarchy of generators: most specific on top
   (onesie, object-id-specific, field name, class)

- implement class aliases. (Any use of library starts with those!)
- Probably will need to keep yr graph as struct
- What if A0 - B0 (two connections from B1, B0)
             X
          A1 - B1

- What if A <- B, A <- C (so u have C.a and B.a
                          different type, same field name)
- onesies?
- Class names: what of generics?
- Generator rename to supplier?
- fasterxml for JSONinig
- field-specific generators: if there is only one
  class, fieldName is more specific. Otherwise, option for warning
  exception
- Stack unavoidable?
- Object generation and fiend generation are separate concepts, after all;
- Rewrite isSuperclass thing
- isPublic/Private/Etc, isPrimitive, isBuiltin?
- field train generator dilemma?
- lookahead before using deflt field generator?
- most of them are somebody's fields
- AtomicBoolean, AtomicInt, etc? (l8r)
- simply specify the relations
- field adjectives: yes, no unspecified? Three values
